from __future__ import annotations

from typing import Optional

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from .models import DetailedMessage, ReputationSummary


def format_summary(summary: ReputationSummary) -> str:
    target = summary.target
    if summary.chat_title:
        header = f"<b>–†–µ–ø—É—Ç–∞—Ü–∏—è ¬´{escape_html(target)}¬ª</b>\n–í —á–∞—Ç–µ: <b>{escape_html(summary.chat_title)}</b>"
    else:
        header = f"<b>–†–µ–ø—É—Ç–∞—Ü–∏—è ¬´{escape_html(target)}¬ª</b>"
    lines = [header, ""]
    lines.append(
        f"<b>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è:</b> {summary.positive} —à—Ç. ({summary.positive_with_media} —Å –º–µ–¥–∏–∞)"
    )
    lines.append(
        f"<b>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è:</b> {summary.negative} —à—Ç. ({summary.negative_with_media} —Å –º–µ–¥–∏–∞)"
    )
    lines.append("")
    if summary.total == 0:
        lines.append("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –°–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–ª–ª–µ–≥ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —É –Ω–∏—Ö –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.")
    elif summary.negative > summary.positive:
        lines.append("‚ö†Ô∏è <i>–ë—É–¥—å—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ!</i>")
    else:
        lines.append("‚úÖ <i>–†–µ–ø—É—Ç–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –¥–æ—Å—Ç–æ–π–Ω–æ.</i>")
    return "\n".join(lines)


def format_detail_messages(details: list[DetailedMessage], limit: int = 30) -> str:
    if not details:
        return "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π."
    rows = ["<b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</b>"]
    for item in details[:limit]:
        sentiment_icon = "üü¢" if item.sentiment == "positive" else "üî¥"
        media_hint = "üì∑" if item.has_photo else ("üìé" if item.has_media else "")
        raw_author = item.author_username or "–∞–Ω–æ–Ω–∏–º"
        if raw_author != "–∞–Ω–æ–Ω–∏–º" and not raw_author.startswith("@"):
            author = f"@{raw_author}"
        else:
            author = raw_author
        rows.append(
            f"{sentiment_icon}{media_hint} <a href='{item.link}'>–°–æ–æ–±—â–µ–Ω–∏–µ</a> ‚Äî {escape_html(author)}"
        )
    return "\n".join(rows)


def build_detail_keyboard(target: str, chat_id: Optional[int]) -> InlineKeyboardMarkup:
    payload = f"detail:{target}:{chat_id if chat_id is not None else 'all'}"
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data=payload)]]
    )
    return keyboard


def build_rep_command_keyboard(target: str, chat_query: Optional[str]) -> InlineKeyboardMarkup:
    buttons = []
    buttons.append(
        [
            InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é",
                switch_inline_query_current_chat=f"rep {target}",
            )
        ]
    )
    if chat_query:
        buttons.append(
            [
                InlineKeyboardButton(
                    text=f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ ¬´{chat_query}¬ª",
                    switch_inline_query_current_chat=f"rep {target} \"{chat_query}\"",
                )
            ]
        )
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def escape_html(text: str) -> str:
    return (
        text.replace("&", "&amp;")
        .replace("<", "&lt;")
        .replace(">", "&gt;")
        .replace('"', "&quot;")
    )
