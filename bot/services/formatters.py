from __future__ import annotations

import math
from typing import Optional

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from .models import DetailedMessage, ReputationSummary


def format_summary(summary: ReputationSummary) -> str:
    target = summary.target
    if summary.chat_title:
        header = f"<b>–†–µ–ø—É—Ç–∞—Ü–∏—è ¬´{escape_html(target)}¬ª</b>\n–í —á–∞—Ç–µ: <b>{escape_html(summary.chat_title)}</b>"
    else:
        header = f"<b>–†–µ–ø—É—Ç–∞—Ü–∏—è ¬´{escape_html(target)}¬ª</b>"
    lines = [header, ""]
    lines.append(
        f"üü¢ <b>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è:</b> {summary.positive} —à—Ç. ({summary.positive_with_media} —Å –º–µ–¥–∏–∞)"
    )
    lines.append(
        f"üî¥ <b>–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è:</b> {summary.negative} —à—Ç. ({summary.negative_with_media} —Å –º–µ–¥–∏–∞)"
    )
    balance = summary.positive - summary.negative
    lines.append(f"‚öñÔ∏è <b>–ë–∞–ª–∞–Ω—Å:</b> {balance:+d}")
    lines.append("")
    if summary.total == 0:
        lines.append("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –°–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–ª–ª–µ–≥ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —É –Ω–∏—Ö –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.")
    elif summary.negative > summary.positive:
        lines.append("‚ö†Ô∏è <i>–ë—É–¥—å—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ!</i>")
    else:
        if balance > 0:
            lines.append(
                "‚úÖ <i>–†–µ–ø—É—Ç–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –¥–æ—Å—Ç–æ–π–Ω–æ: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –±–æ–ª—å—à–µ, —á–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö.</i>"
            )
        else:
            lines.append(
                "‚úÖ <i>–†–µ–ø—É—Ç–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –¥–æ—Å—Ç–æ–π–Ω–æ: –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –±–æ–ª—å—à–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö.</i>"
            )
    return "\n".join(lines)


def format_detail_messages(
    details: list[DetailedMessage],
    total: int,
    page: int,
    page_size: int,
) -> str:
    if total == 0:
        return "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π."

    total_pages = max(1, math.ceil(total / page_size))
    rows = [f"<b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</b> ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"]
    if details:
        start_index = page * page_size + 1
        end_index = start_index + len(details) - 1
        rows.append(f"–ü–æ–∫–∞–∑–∞–Ω—ã –∑–∞–ø–∏—Å–∏ {start_index}‚Äì{end_index} –∏–∑ {total}.")
        rows.append("")
    else:
        rows.append("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return "\n".join(rows)

    for index, item in enumerate(details, start=start_index):
        sentiment_icon = "üü¢" if item.sentiment == "positive" else "üî¥"
        media_hint = "üì∑" if item.has_photo else ("üìé" if item.has_media else "")
        raw_author = item.author_username or "–∞–Ω–æ–Ω–∏–º"
        if raw_author != "–∞–Ω–æ–Ω–∏–º" and not raw_author.startswith("@"):
            author = f"@{raw_author}"
        else:
            author = raw_author
        timestamp = item.created_at.strftime("%d.%m.%Y %H:%M")
        rows.append(
            f"{index}. {sentiment_icon}{media_hint} <a href='{item.link}'>–°–æ–æ–±—â–µ–Ω–∏–µ</a> ‚Äî {escape_html(author)} ¬∑ {timestamp}"
        )
    return "\n".join(rows)


def build_detail_keyboard(
    target: str,
    chat_id: Optional[int],
    page: int = 0,
    total: Optional[int] = None,
    page_size: int = 10,
    include_entry_button: bool = True,
) -> InlineKeyboardMarkup:
    payload_base = f"detail:{target}:{chat_id if chat_id is not None else 'all'}"
    buttons: list[list[InlineKeyboardButton]] = []
    if include_entry_button:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                    callback_data=f"{payload_base}:{page}",
                )
            ]
        )

    if total is not None:
        total_pages = max(1, math.ceil(total / page_size))
        nav_row: list[InlineKeyboardButton] = []
        if page > 0:
            nav_row.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"{payload_base}:{page - 1}",
                )
            )
        nav_row.append(InlineKeyboardButton(text=f"–°—Ç—Ä. {page + 1}/{total_pages}", callback_data="noop"))
        if page + 1 < total_pages:
            nav_row.append(
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è",
                    callback_data=f"{payload_base}:{page + 1}",
                )
            )
        if nav_row:
            buttons.append(nav_row)

    if not buttons:
        buttons.append([
            InlineKeyboardButton(text="üîÅ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"{payload_base}:{page}")
        ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def build_rep_command_keyboard(target: str, chat_query: Optional[str]) -> InlineKeyboardMarkup:
    buttons = []
    buttons.append(
        [
            InlineKeyboardButton(
                text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é",
                switch_inline_query_current_chat=f"rep {target}",
            )
        ]
    )
    if chat_query:
        buttons.append(
            [
                InlineKeyboardButton(
                    text=f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ ¬´{chat_query}¬ª",
                    switch_inline_query_current_chat=f"rep {target} \"{chat_query}\"",
                )
            ]
        )
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def escape_html(text: str) -> str:
    return (
        text.replace("&", "&amp;")
        .replace("<", "&lt;")
        .replace(">", "&gt;")
        .replace('"', "&quot;")
    )
