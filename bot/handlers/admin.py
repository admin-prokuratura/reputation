from __future__ import annotations

import shlex

from aiogram import Bot, Router
from aiogram.filters import Command, Text
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from ..config import Settings
from ..database import Database
from ..services.formatters import escape_html

router = Router(name="admin")


def is_admin(user_id: int, settings: Settings) -> bool:
    return user_id in settings.admin_ids


def build_admin_keyboard(paused: bool) -> InlineKeyboardMarkup:
    pause_label = "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å" if paused else "‚è∏ –ü–∞—É–∑–∞"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
            [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users")],
            [InlineKeyboardButton(text=pause_label, callback_data="admin:pause")],
            [InlineKeyboardButton(text="‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π", callback_data="admin:reputation")],
            [InlineKeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast")],
            [InlineKeyboardButton(text="üí¨ –ì—Ä—É–ø–ø—ã", callback_data="admin:groups")],
        ]
    )


@router.message(Command("admin"))
async def admin_panel(message: Message, settings: Settings, db: Database) -> None:
    if not message.from_user or not is_admin(message.from_user.id, settings):
        return
    paused = await db.is_paused()
    keyboard = build_admin_keyboard(paused)
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)


@router.callback_query(Text(startswith="admin:"))
async def admin_actions(callback: CallbackQuery, settings: Settings, db: Database) -> None:
    user = callback.from_user
    if not user or not is_admin(user.id, settings):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    action = (callback.data or "").split(":", 1)[1]
    if action == "stats":
        stats = await db.fetch_statistics()
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: <b>{stats['active_groups']}</b>\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ: <b>{stats['total_entries']}</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
            f"–ó–∞–ø—Ä–æ—Å–æ–≤: <b>{stats['total_requests']}</b>"
        )
        await callback.message.answer(text)
        await callback.answer()
        return

    if action == "users":
        users = await db.top_users()
        if not users:
            text = "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
        else:
            lines = ["üë• <b>–¢–û–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>"]
            for item in users:
                username = f"@{escape_html(item['username'])}" if item['username'] else "‚Äî"
                status = "üö´" if item['blocked'] else "‚úÖ"
                lines.append(
                    f"{status} {username} ‚Äî {item['request_count']} –∑–∞–ø—Ä–æ—Å–æ–≤ (ID: <code>{item['user_id']}</code>)"
                )
            lines.append(
                "\n–ö–æ–º–∞–Ω–¥—ã: <code>/block &lt;user_id&gt;</code> / <code>/unblock &lt;user_id&gt;</code>"
            )
            text = "\n".join(lines)
        await callback.message.answer(text)
        await callback.answer()
        return

    if action == "pause":
        current = await db.is_paused()
        await db.toggle_pause(not current)
        new_keyboard = build_admin_keyboard(not current)
        try:
            await callback.message.edit_reply_markup(new_keyboard)
        except Exception:
            await callback.message.answer("–ü–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=new_keyboard)
        await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        return

    if action == "reputation":
        text = (
            "‚≠ê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/adjust username +10 -3 [chat_id]</code> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —Å–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã.\n"
            "–î–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ä–∞–≤–Ω–æ–µ —Ç–µ–∫—É—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É."
        )
        await callback.message.answer(text)
        await callback.answer()
        return

    if action == "broadcast":
        text = (
            "üì£ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n"
            "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–≤–µ–¥–∏—Ç–µ <code>/broadcast groups</code> –∏–ª–∏ <code>/broadcast users</code>.\n"
            "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: <code>--button-text</code> –∏ <code>--button-url</code>."
        )
        await callback.message.answer(text)
        await callback.answer()
        return

    if action == "groups":
        groups = await db.list_groups()
        if not groups:
            text = "–ì—Ä—É–ø–ø –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /id, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä."
        else:
            lines = ["üí¨ <b>–ì—Ä—É–ø–ø—ã</b>"]
            for chat in groups[:20]:
                status = "‚úÖ" if chat["is_active"] else "‚è∏"
                title = escape_html(chat["title"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                lines.append(
                    f"{status} {title} ‚Äî ID: <code>{chat['chat_id']}</code>"
                )
            lines.append("\n–£–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É: <code>/drop_group &lt;chat_id&gt;</code>")
            text = "\n".join(lines)
        await callback.message.answer(text)
        await callback.answer()
        return

    await callback.answer()


@router.message(Command("block"))
async def block_user(message: Message, settings: Settings, db: Database) -> None:
    if not message.from_user or not is_admin(message.from_user.id, settings):
        return
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /block &lt;user_id&gt;")
        return
    user_id = int(args[1])
    await db.set_user_blocked(user_id, True)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


@router.message(Command("unblock"))
async def unblock_user(message: Message, settings: Settings, db: Database) -> None:
    if not message.from_user or not is_admin(message.from_user.id, settings):
        return
    args = message.text.split()
    if len(args) < 2 or not args[1].isdigit():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unblock &lt;user_id&gt;")
        return
    user_id = int(args[1])
    await db.set_user_blocked(user_id, False)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")


@router.message(Command("adjust"))
async def adjust_reputation(message: Message, settings: Settings, db: Database) -> None:
    if not message.from_user or not is_admin(message.from_user.id, settings):
        return
    args = shlex.split(message.text)
    if len(args) < 4:
        await message.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/adjust username +10 -3 [chat_id]</code>",
            parse_mode="HTML",
        )
        return
    target = args[1].lstrip("@")
    try:
        positive = int(args[2])
        negative = int(args[3])
    except ValueError:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫.")
        return
    chat_id = int(args[4]) if len(args) > 4 and args[4].lstrip("-+").isdigit() else None
    note = "–†—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"
    await db.add_manual_adjustment(target, chat_id, positive, negative, note, message.from_user.id)
    await message.reply("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


@router.message(Command("drop_group"))
async def drop_group(message: Message, settings: Settings, db: Database) -> None:
    if not message.from_user or not is_admin(message.from_user.id, settings):
        return
    args = message.text.split()
    if len(args) < 2 or not args[1].lstrip("-+").isdigit():
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /drop_group &lt;chat_id&gt;")
        return
    chat_id = int(args[1])
    await db.deactivate_group(chat_id)
    await message.reply(f"–ì—Ä—É–ø–ø–∞ {chat_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤.")


@router.message(Command("broadcast"))
async def broadcast(message: Message, bot: Bot, settings: Settings, db: Database) -> None:
    if not message.from_user or not is_admin(message.from_user.id, settings):
        return
    args = shlex.split(message.text)
    if len(args) < 2:
        await message.reply(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/broadcast groups</code> –∏–ª–∏ <code>/broadcast users</code> (–∫–æ–º–∞–Ω–¥–æ–π –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ).",
            parse_mode="HTML",
        )
        return
    scope = args[1]
    button_text = None
    button_url = None
    if "--button-text" in args:
        idx = args.index("--button-text")
        if idx + 1 < len(args):
            button_text = args[idx + 1]
    if "--button-url" in args:
        idx = args.index("--button-url")
        if idx + 1 < len(args):
            button_url = args[idx + 1]

    if not message.reply_to_message:
        await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å.")
        return

    if scope == "groups":
        targets = await db.active_group_ids()
    elif scope == "users":
        targets = await db.active_user_ids()
    else:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ scope: groups –∏–ª–∏ users")
        return

    reply = message.reply_to_message
    markup = None
    if button_text and button_url:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=button_text, url=button_url)]]
        )

    sent = 0
    for target in targets:
        try:
            await bot.copy_message(
                chat_id=target,
                from_chat_id=reply.chat.id,
                message_id=reply.message_id,
                reply_markup=markup,
            )
            sent += 1
        except Exception:
            continue
    await message.reply(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.")
