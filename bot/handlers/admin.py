from __future__ import annotations

import shlex
from dataclasses import dataclass
from typing import Dict, Literal, Optional

from aiogram import Bot, F, Router
from aiogram.exceptions import SkipHandler
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, Message

from ..config import Settings
from ..database import Database
from ..services.formatters import escape_html

router = Router(name="admin")


@dataclass
class PendingReputation:
    stage: Literal["await_data"]
    prompt_message_id: int


@dataclass
class PendingBroadcast:
    scope: Literal["groups", "users"]
    stage: Literal[
        "await_content",
        "await_button_choice",
        "await_button_text",
        "await_button_url",
    ]
    prompt_message_id: int
    content_chat_id: Optional[int] = None
    content_message_id: Optional[int] = None
    button_text: Optional[str] = None
    button_url: Optional[str] = None


pending_reputation: Dict[int, PendingReputation] = {}
pending_broadcast: Dict[int, PendingBroadcast] = {}


def is_admin(user_id: int, settings: Settings) -> bool:
    return user_id in settings.admin_ids


def build_admin_keyboard(paused: bool) -> InlineKeyboardMarkup:
    pause_label = "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å" if paused else "‚è∏ –ü–∞—É–∑–∞"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
            [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin:users")],
            [InlineKeyboardButton(text=pause_label, callback_data="admin:pause")],
            [InlineKeyboardButton(text="‚≠ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π", callback_data="admin:reputation")],
            [InlineKeyboardButton(text="üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin:broadcast")],
            [InlineKeyboardButton(text="üí¨ –ì—Ä—É–ø–ø—ã", callback_data="admin:groups")],
        ]
    )


def build_users_keyboard(users: list[dict[str, object]]) -> InlineKeyboardMarkup:
    keyboard: list[list[InlineKeyboardButton]] = []
    for item in users:
        user_id = item["user_id"]
        blocked = bool(item["blocked"])
        action = "unblock" if blocked else "block"
        label = "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if blocked else "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
        emoji = "‚úÖ" if blocked else "üö´"
        keyboard.append(
            [
                InlineKeyboardButton(
                    text=f"{emoji} {label} {user_id}",
                    callback_data=f"admin:user:{action}:{user_id}",
                )
            ]
        )
    keyboard.append(
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:users:refresh"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:home"),
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_groups_keyboard(groups: list[dict[str, object]]) -> InlineKeyboardMarkup:
    keyboard: list[list[InlineKeyboardButton]] = []
    for group in groups[:20]:
        chat_id = group["chat_id"]
        keyboard.append(
            [
                InlineKeyboardButton(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {chat_id}",
                    callback_data=f"admin:group:drop:{chat_id}",
                )
            ]
        )
    keyboard.append(
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin:groups:refresh"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:home"),
        ]
    )
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def build_broadcast_scope_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="admin:broadcast:scope:users")],
            [InlineKeyboardButton(text="üí¨ –ì—Ä—É–ø–ø–∞–º", callback_data="admin:broadcast:scope:groups")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:home")],
        ]
    )


def build_broadcast_button_choice() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="admin:broadcast:add_button:yes")],
            [InlineKeyboardButton(text="‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏", callback_data="admin:broadcast:add_button:no")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:broadcast:cancel")],
        ]
    )


def format_users_list(users: list[dict[str, object]]) -> str:
    if not users:
        return "–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    lines = ["üë• <b>–¢–û–ü –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>"]
    for item in users:
        username = f"@{escape_html(item['username'])}" if item['username'] else "‚Äî"
        status = "üö´" if item['blocked'] else "‚úÖ"
        lines.append(
            f"{status} {username} ‚Äî {item['request_count']} –∑–∞–ø—Ä–æ—Å–æ–≤ (ID: <code>{item['user_id']}</code>)"
        )
    lines.append("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å –¥–æ—Å—Ç—É–ø.")
    return "\n".join(lines)


def format_groups_list(groups: list[dict[str, object]]) -> str:
    if not groups:
        return "–ì—Ä—É–ø–ø –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /id, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä."
    lines = ["üí¨ <b>–ì—Ä—É–ø–ø—ã</b>"]
    for chat in groups[:20]:
        status = "‚úÖ" if chat["is_active"] else "‚è∏"
        title = escape_html(chat["title"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        lines.append(f"{status} {title} ‚Äî ID: <code>{chat['chat_id']}</code>")
    lines.append("\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—ë –≤ –∞—Ä—Ö–∏–≤.")
    return "\n".join(lines)


@router.message(Command("admin"))
async def admin_panel(message: Message, settings: Settings, db: Database) -> None:
    if not message.from_user or not is_admin(message.from_user.id, settings):
        return
    paused = await db.is_paused()
    keyboard = build_admin_keyboard(paused)
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("admin:"))
async def admin_actions(callback: CallbackQuery, settings: Settings, db: Database) -> None:
    user = callback.from_user
    if not user or not is_admin(user.id, settings):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return

    raw_data = callback.data or ""
    if raw_data.count(":") > 1:
        raise SkipHandler
    action = raw_data.split(":", 1)[1]
    if action == "home":
        paused = await db.is_paused()
        keyboard = build_admin_keyboard(paused)
        await callback.message.edit_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=keyboard)
        await callback.answer()
        return

    if action == "stats":
        stats = await db.fetch_statistics()
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø: <b>{stats['active_groups']}</b>\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ: <b>{stats['total_entries']}</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total_users']}</b>\n"
            f"–ó–∞–ø—Ä–æ—Å–æ–≤: <b>{stats['total_requests']}</b>"
        )
        await callback.message.answer(text)
        await callback.answer()
        return

    if action == "users":
        users = await db.top_users()
        text = format_users_list(users)
        keyboard = build_users_keyboard(users) if users else InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:home")]]
        )
        await callback.message.answer(text, reply_markup=keyboard)
        await callback.answer()
        return

    if action == "pause":
        current = await db.is_paused()
        await db.toggle_pause(not current)
        new_keyboard = build_admin_keyboard(not current)
        try:
            await callback.message.edit_reply_markup(new_keyboard)
        except Exception:
            await callback.message.answer("–ü–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=new_keyboard)
        await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        return

    if action == "reputation":
        text = (
            "‚≠ê <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π</b>\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä—É—á–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è."
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", callback_data="admin:reputation:new")],
                [InlineKeyboardButton(text="üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏", callback_data="admin:reputation:history")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:home")],
            ]
        )
        await callback.message.answer(text, reply_markup=keyboard)
        await callback.answer()
        return

    if action == "broadcast":
        text = (
            "üì£ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."
        )
        await callback.message.answer(text, reply_markup=build_broadcast_scope_keyboard())
        await callback.answer()
        return

    if action == "groups":
        groups = await db.list_groups()
        text = format_groups_list(groups)
        keyboard = build_groups_keyboard(groups) if groups else InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:home")]]
        )
        await callback.message.answer(text, reply_markup=keyboard)
        await callback.answer()
        return

    await callback.answer()


@router.callback_query(F.data.startswith("admin:user:"))
async def handle_user_actions(callback: CallbackQuery, settings: Settings, db: Database) -> None:
    user = callback.from_user
    if not user or not is_admin(user.id, settings):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    parts = (callback.data or "").split(":")
    if len(parts) != 4:
        await callback.answer()
        return
    action, target_id = parts[2], parts[3]
    if not target_id.isdigit():
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)
        return
    target_user_id = int(target_id)
    if action == "block":
        await db.set_user_blocked(target_user_id, True)
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    elif action == "unblock":
        await db.set_user_blocked(target_user_id, False)
        await callback.answer("–î–æ—Å—Ç—É–ø –≤–æ–∑–≤—Ä–∞—â—ë–Ω")
    else:
        await callback.answer()
        return
    users = await db.top_users()
    text = format_users_list(users)
    keyboard = build_users_keyboard(users) if users else InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:home")]]
    )
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception:
        await callback.message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "admin:users:refresh")
async def refresh_users(callback: CallbackQuery, settings: Settings, db: Database) -> None:
    user = callback.from_user
    if not user or not is_admin(user.id, settings):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    users = await db.top_users()
    text = format_users_list(users)
    keyboard = build_users_keyboard(users) if users else InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:home")]]
    )
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")


@router.callback_query(F.data.startswith("admin:group:"))
async def handle_group_actions(callback: CallbackQuery, settings: Settings, db: Database) -> None:
    user = callback.from_user
    if not user or not is_admin(user.id, settings):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    parts = (callback.data or "").split(":")
    if len(parts) != 4:
        await callback.answer()
        return
    action, chat_id_raw = parts[2], parts[3]
    if not chat_id_raw.lstrip("-+").isdigit():
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä", show_alert=True)
        return
    chat_id = int(chat_id_raw)
    if action == "drop":
        await db.deactivate_group(chat_id)
        await callback.answer("–ì—Ä—É–ø–ø–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤")
    else:
        await callback.answer()
        return
    groups = await db.list_groups()
    text = format_groups_list(groups)
    keyboard = build_groups_keyboard(groups) if groups else InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:home")]]
    )
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception:
        await callback.message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "admin:groups:refresh")
async def refresh_groups(callback: CallbackQuery, settings: Settings, db: Database) -> None:
    user = callback.from_user
    if not user or not is_admin(user.id, settings):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    groups = await db.list_groups()
    text = format_groups_list(groups)
    keyboard = build_groups_keyboard(groups) if groups else InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:home")]]
    )
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ")


@router.callback_query(F.data == "admin:reputation:new")
async def request_manual_adjustment(callback: CallbackQuery, settings: Settings) -> None:
    user = callback.from_user
    if not user or not is_admin(user.id, settings):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    prompt = await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>username +10 -3 [chat_id]</code>",
        parse_mode="HTML",
    )
    pending_reputation[user.id] = PendingReputation(stage="await_data", prompt_message_id=prompt.message_id)
    await callback.answer("–û–∂–∏–¥–∞—é –¥–∞–Ω–Ω—ã–µ")


@router.callback_query(F.data == "admin:reputation:history")
async def show_manual_adjustments(callback: CallbackQuery, settings: Settings, db: Database) -> None:
    user = callback.from_user
    if not user or not is_admin(user.id, settings):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    adjustments = await db.recent_manual_adjustments()
    if not adjustments:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç —Ä—É—á–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫."
    else:
        lines = ["üìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏</b>"]
        for item in adjustments:
            username = item["target"]
            pos = item["positive_delta"]
            neg = item["negative_delta"]
            chat = item.get("chat_id")
            creator = item.get("created_by")
            created_at = item.get("created_at")
            parts = [f"üë§ <code>{escape_html(username)}</code>"]
            if chat:
                parts.append(f"–≤ —á–∞—Ç–µ <code>{chat}</code>")
            parts.append(f"+{pos} / -{neg}")
            if creator:
                parts.append(f"–æ—Ç <code>{creator}</code>")
            if created_at:
                parts.append(created_at)
            lines.append(" ".join(parts))
        text = "\n".join(lines)
    await callback.message.answer(text, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data.startswith("admin:broadcast:scope:"))
async def choose_broadcast_scope(callback: CallbackQuery, settings: Settings) -> None:
    user = callback.from_user
    if not user or not is_admin(user.id, settings):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    scope = (callback.data or "").split(":")[-1]
    if scope not in {"groups", "users"}:
        await callback.answer()
        return
    prompt = await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å. –û–Ω–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è.",
    )
    pending_broadcast[user.id] = PendingBroadcast(
        scope=scope,
        stage="await_content",
        prompt_message_id=prompt.message_id,
    )
    await callback.answer("–ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ")


@router.callback_query(F.data.startswith("admin:broadcast:add_button:"))
async def broadcast_button_choice(callback: CallbackQuery, settings: Settings, bot: Bot, db: Database) -> None:
    user = callback.from_user
    if not user or not is_admin(user.id, settings):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    state = pending_broadcast.get(user.id)
    if not state:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏", show_alert=True)
        return
    choice = (callback.data or "").split(":")[-1]
    if choice == "yes":
        state.stage = "await_button_text"
        prompt = await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏")
        state.prompt_message_id = prompt.message_id
        await callback.answer("–ñ–¥—É —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏")
        return
    if choice == "no":
        await perform_broadcast(callback.message, bot, db, user.id, state)
        await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return
    await callback.answer()


@router.callback_query(F.data == "admin:broadcast:cancel")
async def cancel_broadcast(callback: CallbackQuery, settings: Settings) -> None:
    user = callback.from_user
    if not user or not is_admin(user.id, settings):
        await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
        return
    if user.id in pending_broadcast:
        pending_broadcast.pop(user.id)
    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    await callback.message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


async def perform_broadcast(message: Message, bot: Bot, db: Database, admin_id: int, state: PendingBroadcast) -> None:
    if state.content_chat_id is None or state.content_message_id is None:
        await message.answer("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        pending_broadcast.pop(admin_id, None)
        return
    if state.scope == "groups":
        targets = await db.active_group_ids()
    else:
        targets = await db.active_user_ids()
    markup = None
    if state.button_text and state.button_url:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text=state.button_text, url=state.button_url)]]
        )
    sent = 0
    for target in targets:
        try:
            await bot.copy_message(
                chat_id=target,
                from_chat_id=state.content_chat_id,
                message_id=state.content_message_id,
                reply_markup=markup,
            )
            sent += 1
        except Exception:
            continue
    pending_broadcast.pop(admin_id, None)
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º.")


@router.message()
async def handle_admin_inputs(message: Message, settings: Settings, db: Database, bot: Bot) -> None:
    if not message.from_user or not is_admin(message.from_user.id, settings):
        raise SkipHandler
    user_id = message.from_user.id
    rep_state = pending_reputation.get(user_id)
    if rep_state and rep_state.stage == "await_data":
        args = shlex.split(message.text or "")
        if len(args) < 3:
            await message.reply(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>username +10 -3 [chat_id]</code>",
                parse_mode="HTML",
            )
            return
        target = args[0].lstrip("@")
        try:
            positive = int(args[1])
            negative = int(args[2])
        except ValueError:
            await message.reply("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫.")
            return
        chat_id = int(args[3]) if len(args) > 3 and args[3].lstrip("-+").isdigit() else None
        note = "–†—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"
        await db.add_manual_adjustment(target, chat_id, positive, negative, note, user_id)
        pending_reputation.pop(user_id, None)
        await message.reply("–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        return

    broadcast_state = pending_broadcast.get(user_id)
    if not broadcast_state:
        raise SkipHandler
    if broadcast_state.stage == "await_content":
        broadcast_state.content_chat_id = message.chat.id
        broadcast_state.content_message_id = message.message_id
        broadcast_state.stage = "await_button_choice"
        await message.reply("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?", reply_markup=build_broadcast_button_choice())
        return
    if broadcast_state.stage == "await_button_text":
        if not message.text:
            await message.reply("–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
        broadcast_state.button_text = message.text
        broadcast_state.stage = "await_button_url"
        prompt = await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏")
        broadcast_state.prompt_message_id = prompt.message_id
        return
    if broadcast_state.stage == "await_button_url":
        if not message.text:
            await message.reply("–°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
            return
        broadcast_state.button_url = message.text
        broadcast_state.stage = "await_button_choice"
        await perform_broadcast(message, bot, db, user_id, broadcast_state)
        return

    raise SkipHandler
