from __future__ import annotations

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import KeyboardButton, Message, ReplyKeyboardMarkup
from aiogram.types.chat_member_updated import ChatMemberUpdated
from aiogram.enums import ChatMemberStatus
from html import escape

from ..config import Settings
from ..database import Database

router = Router(name="basic")


MENU_INFO_BUTTON = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
MENU_INSTRUCTION_BUTTON = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"

PRIVATE_MENU = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=MENU_INFO_BUTTON), KeyboardButton(text=MENU_INSTRUCTION_BUTTON)]],
    resize_keyboard=True,
)


@router.message(CommandStart())
async def on_start(message: Message, settings: Settings) -> None:
    if message.chat.type != "private":
        return
    text = "\n".join(
        [
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç ¬´–ù–∏–∫ –±–æ—Ç–∞¬ª. –Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö —Å–¥–µ–ª–æ–∫.",
            "",
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/r @username</code> –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.",
        ]
    )
    if settings.admin_ids and message.from_user and message.from_user.id in settings.admin_ids:
        text += (
            "\n\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û—Ç–∫—Ä–æ–π—Ç–µ /admin –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )
    await message.answer(text, reply_markup=PRIVATE_MENU)


@router.message(F.text == MENU_INFO_BUTTON)
async def show_information(message: Message, db: Database) -> None:
    if message.chat.type != "private":
        return
    groups = await db.list_groups()
    active = [item for item in groups if item.get("is_active")]
    if not active:
        text = "‚ÑπÔ∏è –ü–æ–∫–∞ –±–æ—Ç –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–∏ –æ–¥–∏–Ω —á–∞—Ç. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä —Ä–µ–ø—É—Ç–∞—Ü–∏–∏."
    else:
        lines = ["‚ÑπÔ∏è <b>–ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Ç—ã:</b>"]
        for group in active:
            title = group.get("title") or ""
            username = group.get("username")
            identifier = f"ID {group['chat_id']}"
            if title and username:
                display = f"{escape(title)} (@{escape(username)})"
            elif title:
                display = escape(title)
            elif username:
                display = f"@{escape(username)}"
            else:
                display = identifier
            lines.append(f"‚Ä¢ {display}")
        text = "\n".join(lines)
    await message.answer(text, reply_markup=PRIVATE_MENU)


@router.message(F.text == MENU_INSTRUCTION_BUTTON)
async def show_instruction(message: Message) -> None:
    if message.chat.type != "private":
        return
    text = "\n".join(
        [
            "üõ° <b>–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é</b>",
            "",
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/r @username</code> ‚Äî –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã.",
            "2. –ß—Ç–æ–±—ã —Å—É–∑–∏—Ç—å –ø–æ–∏—Å–∫ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: <code>/r @username \"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞\"</code>.",
            "3. –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∫ –≤ –≥—Ä—É–ø–ø–∞—Ö, —Ç–∞–∫ –∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.",
        ]
    )
    await message.answer(text, reply_markup=PRIVATE_MENU)


@router.message(Command("id"))
async def chat_id(message: Message, settings: Settings) -> None:
    if message.chat.type == "private" and (
        not message.from_user or message.from_user.id not in settings.admin_ids
    ):
        return
    await message.reply(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{message.chat.id}</code>")


@router.my_chat_member()
async def on_chat_member(update: ChatMemberUpdated, db: Database) -> None:
    chat = update.chat
    status = update.new_chat_member.status
    if status in {ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR}:
        await db.register_group(chat.id, chat.title, chat.username, chat.type)
    elif status in {ChatMemberStatus.LEFT, ChatMemberStatus.KICKED, ChatMemberStatus.RESTRICTED}:
        await db.deactivate_group(chat.id)
